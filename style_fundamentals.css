/*-----------The Internet-------------*/
/*
* The internet can be thought of as a vast network of devices connected to each other through certain sets of protocols. 
* These devices can include computers, smartphones, servers, routers, and various other devices capable of connecting to the internet. 
* These devices communicate with each other using a set of protocols, which are essentially a set of rules and conventions that 
  dictate how data should be transmitted, received, and interpreted across the network.

* These protocols include both wired and wireless communication standards, and they play a crucial role in enabling devices to interact
  with each other seamlessly. Here are some key points about these protocols:

Wired Protocols: 
* Wired protocols involve physical connections between devices using cables or other physical mediums. 
Some common examples include:
Ethernet: This is a widely used protocol for local area networks (LANs), where devices are connected through wired connections using
Ethernet cables.
USB (Universal Serial Bus): USB is a protocol for connecting devices like computers, smartphones, and peripherals using cables.
HDMI (High-Definition Multimedia Interface): HDMI is a protocol for transmitting high-quality audio and video signals between devices, 
often used for connecting devices to displays.

Wireless Protocols: 
Wireless protocols enable devices to communicate without physical connections. Some common examples include:
Wi-Fi: Wi-Fi is a wireless protocol that allows devices to connect to the internet and local networks using radio waves.
Bluetooth: Bluetooth is a short-range wireless protocol used for connecting devices like headphones, speakers, and smartphones.
Cellular Networks: Cellular networks, like 4G and 5G, use wireless protocols to provide internet connectivity to mobile devices over 
large geographical areas.
These protocols work together to enable the seamless flow of data across the internet. When you access a website, send an email, 
stream a video, or engage in any online activity, your device communicates with other devices and servers across the internet using 
these protocols.

Higher Level Protocols:
In addition to the communication protocols mentioned above, there are also higher-level protocols that govern specific tasks 
such as sending and receiving emails (SMTP, IMAP), browsing the web (HTTP, HTTPS), transferring files (FTP), and more. 
All these protocols collectively form the foundation of the interconnected digital world we know as the internet.

Higher-level protocols are a set of rules and conventions that dictate how data should be structured, transmitted, and interpreted 
at a more abstract level than the lower-level protocols we discussed earlier. 
These protocols provide a framework for specific tasks and applications that involve more complex interactions between devices
and systems. Here are some examples of higher-level protocols:

HTTP (Hypertext Transfer Protocol): HTTP is the foundation of data communication on the World Wide Web. 
It defines how web browsers request web pages from servers and how servers respond with the requested content. 
HTTPS (HTTP Secure) is a secure version of HTTP that uses encryption to protect the data being transmitted.

FTP (File Transfer Protocol): FTP is used for transferring files between computers over a network. 
It provides a way to upload and download files to and from a remote server.

SMTP (Simple Mail Transfer Protocol) and IMAP (Internet Message Access Protocol): These protocols are used for sending and receiving
emails, respectively. SMTP handles the sending of emails, while IMAP is used to retrieve emails from a mail server.

POP3 (Post Office Protocol version 3): Similar to IMAP, POP3 is another protocol used for retrieving emails from a mail server. 
It downloads emails to the local device, often deleting them from the server.

DNS (Domain Name System): DNS is a protocol used to translate human-readable domain names (like www.example.com) into IP addresses,
allowing devices to locate each other on the internet.

SSH (Secure Shell): SSH is a protocol for secure remote access to computers and servers over a potentially insecure network.
It provides encrypted communication and authentication.

SNMP (Simple Network Management Protocol): SNMP is used for managing and monitoring network devices, such as 
routers, switches, and servers. It allows administrators to gather information and manage devices remotely.

VoIP (Voice over Internet Protocol): VoIP protocols, like SIP (Session Initiation Protocol), enable voice and multimedia communication
over the internet, allowing for services like internet-based phone calls and video conferencing.

XMPP (Extensible Messaging and Presence Protocol): XMPP is a protocol for real-time communication, 
often used for instant messaging and presence information (e.g., whether a user is online or offline).

WebSocket: WebSocket is a protocol that provides full-duplex communication channels over a single TCP connection, 
allowing for interactive and real-time web applications.

These higher-level protocols build upon the lower-level communication protocols like 
TCP/IP (Transmission Control Protocol/Internet Protocol) and UDP (User Datagram Protocol) to enable specific applications 
and services on the internet. They define how data should be formatted, how requests and responses should be structured, 
and how devices should interact to accomplish various tasks.
*/


/*---------------Domain Name System(DNS)resolution----------*/
/*
 * The DNS resolution process involves at least 4 servers after failing to find an address locally, the browser only
 * sends its request to recursor and then waits for recursor to provide a resolved response/IP address
 * 1. Recursor server or DNS Recursor - Provided by the ISP, first step, can be thought as a librarian, makes all requests
 * 2. Root nameserver - Second step, reference to further specific locations, can be thought of as a row number of racks returns tld servers address
 * 3. TLD nameserver - Top level domain server, resolves last part i.e. .com etc., can be thought of as a rack# with books returns authoritative ns's address
 * 4. Authoritative nameserver - Final step, By hosting provider, Can be thought as dictionary on that rack with all definitions returns the final address
*/ 
/* ------------- The CSS Fundamentals ------------*/
/* How browser renders a web page: https://medium.com/jspoint/how-the-browser-renders-a-web-page-dom-cssom-and-rendering-df10531c9969 
 * --------------The HTML Rendering---------------- *
 * The browser looks up for the ip address associated to the DOMAIN and sends it a get request
 * The server then responds by sending a BINARY STREAM FORMAT to the browser
 * This BSF is basically a stream of binary data which includes the response headers of content-type=text/html and charset = UTF-8
 * The received binary response also will have a response body which will be parsed by browser based on the previously identified
 * The content-type header and the char encoding helps the browser decode and convert the binary response body into the html format
 * To convert this binary data into understandable/parseable HTML the browser engine does the conversion as: 
   Bytes(BSF) => Characters (Using the charset value) => Tokenization (Accounting for all the html tags etc)
 * We can check the headers of a request and the hosting server info, CORS info in the network tab of browser
 * If there is no header present the browser will simply render the file in text format 
 * Now the browser starts reading/parsing the html document to create DOM
 * For each line-break, comment, html element the browser creates an equivalent JS NODE
 * NODE is a parent class in Js and it has sub classes like HTMLDivElement, HtmlScriptElement, HTMLAudioElement, HTMLButtonElement... so on
 * So the browser calls the respective subclass' constructor to create the Js objects e.g. for every div element the browser will call new HTMLDivElement()
 * After creating all the objects the browser creates a tree structure with the html object/element at the root
 * This tree structure of equivalent html elements/objects is called the Document Object Model
 * Unlike the CSSOM the DOM consists of all type of element i.e. either visble on the screen or not e.g. comments, script or link or meta tags
 * The document object model can be manipulated by using a clientside web api exposed by the browser i.e. the document api
 * More about Api here: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction
 * The DOMContent loaded fn is a good performance matrix and it runs when the browser has finished the parsing of html DOM
 * The window.onload executes when all the external script, image and stylesheets are downloaded

/*-------------- CSS Behind the Scenes -----------*/
/* 
 * The browser rendering happens in a certain format
 * 1. Browser translates binary to HTML
 * 2. Starts parsing HTML, when comes accross <link rel="stylesheet"> starts loading CSS and continues HTML
 * 2.1 Browser finishes parsing HTML => Browser develops DOM
 * 2.2.1 Browser starts parsing CSS
 * 2.2.1.1 While Parsing CSS two things happen:
         i.  Browser resolves conflicting CSS  i.e. determines which declaration to apply to 
             certain HTML parts, based on the cascade rules
         ii. Browser computes the style values in pixels i.e. percentages etc are converted to
             literal values.

 * 2.2 CSSOM [CSS OBJECT MODEL] is created

 * 3. DOM + CSSOM = Render Tree is created

 * 4. Website rendering: Visual formatting model/Layout/Reflow

 * 5. Final website rendered/Compositing
*/

/*-------------- Critical Rendering Path -----------*/
/* The browser loads the web page in a certain sequence:
 * As soon as it receives a few characters or lines of the html response in binary stream format it starts parsing the doc for DOM Creationok
 
 * This DOM parsing happens on the main thread and all the other download operations of external resources are done concurrently on other threads
 * The browser creates DOM INCREMENTLY i.e. one node after another as the html is a nested structure like a tree
 * If the browser encounters an embedded or inline style it will concurrently create the CSSOM on the main thread and this will not block the DOM Parsing
 * If the browser encounters an external style sheet through a link tag it will not block the dom parsing but will download that sheet on the side silently
 * The browser when will finish parsing DOM THEN IT WILL CREATE THE CSSOM AT ONCE RATHER THAN CREATING IT INCREMENTLLY ALONG THE DOM CREATION 
 * This happens because if the CSSOM creation was done incrementlly the cascading effect/style overriding will trigger several re renders for render tree
 * THE ONLY WAY CSS WILL BLOCK THE CRITICAL RENDERING PATH IS IF THE BROWSER IS DONE PARSING DOM BUT THE STYLES ARE STILL DOWNLOADING HENCE BLOCKING THE RENDER TREE
 * The critical rendering path is as follows:
 * DOM CREATION/SCRIPT EXECUTION => CSSOM CREATION => RENDER TREE CREATION => LAYOUT OPERATION => PAINT OPERATION(LAYERS OF CONTENT/Z-AXIS) => COMPOSITING OPERATION
 * CSS is render blocking as if there is no CSSOM the critical rendering path wont progress and browser wont show any content
 * JS is also render blocking as whenever a script is encountered it is executed immidiately. The execution of a script also needs the CSSOM to be constructed already
   as it can alter the styles of the elements in the DOM
*/

/*----------- CSS Terms -----------*/
/*
 * RULE: A css rule consists of a selector and a declaration block
 * DECLARATION: A css declaration consists of a property and a declared value
 * PSEUDO ELEMENTS: A pseudo-element is a ‘fake’ element, it isn’t really in the document with 
 * the ‘real’ ones e.g. p::after, p::before, p::first-letter, p::first-line They can be used to style a specific PART of an element
 * PSEUDO CLASSES: These are like ‘fake’ classes that are applied to elements under certain 
 * conditions, much like how you would manipulate the classes of elements using JavaScript e.g.:
 * p:first-child, p:hover, :root etc They can be used to style a specific STATE of an element

// THE CSSOM IS ALL ABOUT FINDING THE RIGHT CSS VALUE FOR EACH COMPONENT OR RESOLUTION OF VALUE FOR AN ELEMENT


/*----------- Specificity(CASCADING) of CSS Selectors -----------*/
/*
 * CASCADE: Process of combining different stylesheets and resolving conflicts
 * between different CSS rules and declarations, when more than one rule applies to 
 * a certain element.
 * There are SEVERAL SOURCES for CSS in a browser:
   i.   The CSS written by the developer is known as Author CSS
   ii.  The CSS controlled by user e.g. user sets a specific font size in browser settings,
        this stylesheet is known as USER CSS
   iii. The CSS which is by default applied by the browser e.g. link tag appears blue and 
        underlined, these are called USER-AGENT/AGENT CSS and IT MIGHT ME DIFFERENT FOR DIFFERENT BROWSERS(Good to normalize/Reset css for cross browser)
    iv. The CSS specifications according to W3 schools


 * ---------------------- WHICH CSS TO BE APPLIED-------------------
 * The browser determines which CSS to be applied to certain HTML using a COMBINATION OF SELECTOR'S SPECIFICITY AND SOURCE PRIORITY as set of rules:
 * Source  > SPECIFICITY/Priority [!important](Within Same Source)



 * ******* Source & Priority ********
 * The normal priority of Sources is as follows:
 * User > Inline author > Internal author (does not depends on <link> comes later or <style>) > External Author > User-AGENT
 * These are the most prioritized set of declartions which include !important keyword
 * They have the following specificty according to CSS sources
 * User Important > Author Inline !important > Author Internal !important > Author External !important > User-AGENT > W3C

 * ******* SPECIFICITY ********
 * In case there is a tie between two or more rules originating from the same source then specificity is checked
 * The specificity regarding an individual source is as follows:
 * Inline > ID > classes, pseudo-classes, attributes > Elements, pseudo elements
 * Calculation of specificity (Inline, IDs, Classes, Elements)
 * nav#menu div.pull-right .button = (0, 1, 2, 2)

 * ******* ORDER ********
 * In case the specificity of the selectors also results in same value the order of declarations is checked
 * The conflicting declarations with equal specificty are resolved by determining their order
 * The declartion which was the included later most will win here

 * ******* NOTE ********
 * TO TARGET THE HOVER, CHECKED, ENABLED ETC. PSEUDO CLASSES OF AN ELEMENT, THE SPECIFICITY OF 
 * THE STYLE APPLIED WITHOUT ANY PSEUDO CLASS SHOULD BE LOWER OR EQUAL TO THE SPECIFICITY OF
 * SELECTOR USING WHICH WE ARE APPLYING THE PSEUDO STATE CSS
 * e.g. #div a.link {background-color: black} with a:hover {background-color:blue} wont work
 * This also applies to the media queries when overwriting styles


/*----------- Determination of final CSS Values -----------*/
/*
 * 1. DECLARED VALUE: At this step browser finds all the declared css values for an html element
 * 2. CASCADED VALUE: The conflict between declared values is resolved and one is selected
 * 3. SPECIFIED/INHERITED VALUE: If no cascadded value found then check for inherited values, if inheritance applies then
                       inherited value is used, if no inheritance applicable use initial values from UA stylesheet
                       If cascaded values was found then it is the specified value directly. a specified value may also be an inherited value,
                       an inherited value cannot be a specified value in CSS.
 * 4. COMPUTED VALUE: rem, em and CSS values like orange, auto, bolder all relative values are computed in pixels here
 * 5. USED VALUE/ACTUAL VALUE: Final calculation based on layout, e.g. % converted to pixels etc. The browser finally rounds off and uses this values in layout


 ************* LEARNING OUTCOMES **************
 * Each property has an initial value, used if nothing is declared and no inheritance is applicable
 * Browsers specify a root-font-size of 16px i.e. from the User agent CSS not from CSS specification
 * % and relative values are always converted to pixels
 * %ages are measured relative to parent's font-size, if used to specify font-size
 * %ages are measured relative to just parent's WIDTH  if used to specify the height/width/padding/margin
 * em are measured relative to their PARENTS font size if used to specify font size
 * em are measured relative to their OWN font size if used to specify lengths
 * rem are always measured relative to document's root font-size i.e. 16px
 */
 
/*----------- Inheritance in CSS -----------*/
/*
 * EVERY PROPERTY in css should have a VALUE
 * While parsing the CSS the browser tries to find the cascaded value of an element first
 * If no declared or cascaded value is found, it tries to check if the element has an
 * INHERITED VALUE e.g. if parent has a line height, the child will automatically get it by inheritance
 * If the property is non inheritable, the browser will set the specified value equal to the one
 * defined in the CSS Specifications as initial value i.e. specified value = initial value

************* LEARNING OUTCOMES **************
 * Inheritance passes value to children in case of some SPECIFIC PROPERTIES
 * As a rule of thumb properties related to TEXT AND FONTS ARE INHERITED e.g. text-align
 * font-size, color, line-height etc.
 * Inheritance only works when neither the browser nor the developer specify any values for a given element
 * The "inherit" keyword can be used to FORCE INHERITANCE on a property
 * The "initial" keyword can be used to FORCE RESET any property being inherited to initial value
*/


/*----------- rem and other CSS tricks -----------*/
/*
 * To make the code more maintainable and responsive always use rem units as lengths and font-size
 * The default user-agent root font size is 16px which is inherited by all elements by default
 * To make the lenghts and fonts fully responsive with a single line media query, we should set
 * the ROOT FONT SIZE TO 10PX. But we should do so by taking %age of user-agent font-size i.e.
 * 62.5% of 16px = 10px => :root { font-size: 62.5%; }
 * NOW USE rem UNITS EVERYWHERE IN THE REST OF THE CSS e.g. for 30 px use 3rem for 25 use 2.5rem
 
 * Also the UNIVERSAL RESET should be *, *::after, *::before { margin:0; padding:0 box-sizing:inherit }
 * ALONGWITH body { box-sizing: border-box; }
 */


/*----------- RESPONSIVE DESIGN TRICKS -----------*/
/* ------------General Layout/Containers----------
 * For container we usually have a problem if we just set the width to 90% they become too wide on large screens
 * If we set 50 or 60% the width gets too small on the mobile devices So we should use WIDTH:90% ALONGWITH MAX-WIDTH:960PX;
 * Using width and max-width together will allow us to scale the layout from getting too big or too small for screens
 * FOUND THE GOLD: https://developer.mozilla.org/en-US/docs/Web/CSS/clamp() 
 *
 *---------------For Images------------------------
 * In general set the rule img {max-width: 100%; display: block}
 * Setting max-width 100% will stop  the images go out of the containers and display block will make them avoid the
 * font like behaviour meaning they will not stay above the line like the bottom of the a text line is aligned
 * USE THE object-fit property where necassary to make the image fit a size without losing its dimensions
 * 
 *---------------Units------------------------
 * As a general rule of thumb use:
 * rem for font-sizes
 * em for paddings and margins
 * %ages and em for widths/heights
 *
 *---------------Fun Facts---------------------
 * We can use Emojis as class names as well 
 * We can use ascpect ratio to maintain the aspect ratio of an image or video but not well supported yet
 * WE CAN USE INLINE VARIABLES, ASSIGN A VALUE TO THEM AND THEN USE THEM IN THE CSS CALC FUNCTION OR IN GENERAL TO 
 * PERFORM COOL THINGS
 * animation-fill-mode: backwards; WILL SET OUR ELEMENT TO INITIAL POSITION IN THE KEY FRAME RATHER THAN
   RENDERING AND THEN STARTING THE ANIMATION
*/



/*----------- Visual formatting model CSS ------------*/
/*
 * The visual form. model actually refers to the algorithm the browser uses to determine
 * how a page will look/rendered by calculating boxes and determining layout of each element
 * in the render tree
 * The visual formatting model of CSS for an element is detemined based on the following factors:
   1. Dimensions of the boxes: The box model
   2. Box-type: inline, block, inline-block
   3. Positioning Scheme: static, float, absolute, relative, sticky, fixed
   4. Stacking context: means z-index etc
   5. Other elements in the render tree i.e. parents, siblings
   6. Viewport size, image size etc

   i) The Box Model
       Considers each and every element as a box that can have a height, a width, paddings, border,
       margins
       The height and width combined constitute the content area
       The padding and margins are optional i.e. they can be 0 as well
       The values of padding and border width are added to the content to determine total width of box
       fill-area: The fill area is considered as the padding + border + content and all the
       background-color or background-image apply to this whole area rather than just the content 
       BORDER-BOX:The box-sizing property allows us to include the padding and border in an element's 
       total width and height. The width and height we set give priority to the padding and border only i.e. their 
       values are allocated in the layout no matter how much the browser have to squeeze the content's width and height
       SO IN CASE THE CONTENT + PADDING LEFT + PADDING RIGHT + BORDER LEFT + BORDER RIGHT => SPECIFIED WIDTH AND HEIGHT the total value
       value of padding + borders is applied to the box rather than the specified height and width
       CONTENT-BOX: The default value of box-sizing and specifies the width and height on content only i.e. padding and
       border values are additionally applied to the element
  ii) The Box Type
      The Box type can be block, inline-block, inline

      BLOCK: 
       The display: block, flex, list-item, table convert an element into a block level elem
       The block level element occupies 100% of its parent's WIDTH by default
       Block level elements appear vertically one after other
      INLINE:
       The display:inline
       The content is distributed in lines
       Occupies only content's WIDTH
       No width or height can be specified
       Paddings and margins can only be applied horizontally left and right
      INLINE-BLOCK:
       Content is distributed in lines
       Width and height can be applied
       Occupies only content's space
       No line-breaks
       Box-model applies as normal i.e. padding and margin

 iii) The Positioning Scheme
      FLOAT: 
       Other elements wrap around the floated element
       Container(Parent) will not adjust its height according to the floated element
       To avoid the next elements filling in the space left below the floated elements
       we use clear on the oncoming elements so they clear the floats from both directions
       The element is not removed from the normal flow

       STATIC:
       The default position of each element if no position is specified by the author
       Each element stays in the normal flow and we cannot set the top, right, bottom, left values

       RELATIVE:
       Element is not removed from the normal flow and can be positioned relative to its normal position in the flow
       using the top, bottom, right and left properties

      ABSOLUTE POSITIONING AND FIXED:
       Element is removed from the normal flow
       position: absolute and position: fixed specify absolute positioning
       In fixed position the element will remain visible all the time on the fixed position even if the doc is scrolled
       The elements' position is calculated based on the nearest positioned ancestor and if no nearest ancestor is positioned
       then the position is calculated based on the top most asncestor
       We can set the position using top right left and bottom properties
       No impact on surrounding content or elements

     STICKY: 
      Sticky position is a combination of fixed and relative positioning
      The element is not removed from the normal flow
      The element stays in the normal flow like relative positioning till a certain point
      The element becomes fixed after a certain scrolling point and will act as position was fixed
      We can use the top left bottom and right properties to set the position 

  iv) The Stacking Context
      z-index, tranform, opacity less than 1 create a new stacking context
      The element at the bottom is painted first
      The element at the top is painted last


/*----------- The BEM naming convention ------------*/
/*
 * THINK => BUILD => ARCHITECT are the three phases in a project
 * When thinking before designing think of building in the form of reusable componets
 * There is another methodolgy called ATOMIC design and we should explore it as well

 * When building use a specific methodology for naming elements
 * BEM => Block Element Modifier
 * BLOCK: A standalone component that has a meaning of its own  e.g. .recipe and can have nested blocks
 * ELEMENT: A part of block that has no stand-alone meaning e.g. .recipe__img or .recipe__btn
 * MODIFIER: A different version of a block OR an element e.g. classname=.btn .recipe__btn .btn--round

 * A very useful article for BEM: https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/

 * When architecting make a proper logical file/folder hierarchy
 * Learn about ITCSS, SMACS CSS and 7-1 pattern
 * The 7-1 architecture specifies that we should have 7 different folders for partial SaSS files
 * All these partial Sass files should be funneled/imported into ONE CSS COMPILED SHEET
 * These 7 folders include:
    base/       Basic project definitions e.g. resets and typography
    components/ One file for each component
    layout/     Overall layout of the project
    pages/      Style for specific pages of project
    themes/     If we want to implement diff visual themes
    abstracts/  The code which doesnot output any CSS e.g. mixins, variables
    vendors/    All the third party CSS
    sass/
| EXAMPLE
|– abstracts/
|   |– _variables.scss    # Sass Variables
|   |– _mixins.scss       # Sass Mixins
|
|– vendors/
|   |– _bootstrap.scss    # Bootstrap
|
|– base/
|   |– _reset.scss        # Reset/normalize
|   |– _typography.scss   # Typography rules
|
|– layout/
|   |– _navigation.scss   # Navigation
|   |– _grid.scss         # Grid system
|   |– _header.scss       # Header
|   |– _footer.scss       # Footer
|   |– _sidebar.scss      # Sidebar
|   |– _forms.scss        # Forms
|
|– components/
|   |– _buttons.scss      # Buttons
|   |– _carousel.scss     # Carousel
|   |– _cover.scss        # Cover
|   |– _dropdown.scss     # Dropdown
|
|– pages/
|   |– _home.scss         # Home specific styles
|   |– _contact.scss      # Contact specific styles
|
|– themes/
|   |– _theme.scss        # Default theme
|   |– _admin.scss        # Admin theme
|
 – main.scss              # Main Sass input file use the @import to import all partials and does not contain any styles
 * Not ALL Folders are always required
*/

/*----------- SYNTACTICALLY AWESOME STYLE SHEETS ------------*/
/*
 * SASS is a CSS pre-processor which is a syntactically better way to write CSS
 * We can write SASS in two formats i.e. .SCSS OR .SASS
 * Prefered way to write is SCSS
 * The .scss file is then compiled to normal css before deploying the project 
 * The SASS files are not deployed to the server only the compiled css file is deployed
 * SASS is actually CSS on steroids i.e. we can use variables, loops, conditionals, mixins, functions
 * // can be used to write comments in scss files
 * Variables can be defined using $var1:value;  whereas in css we use --var1:value
 * Nesting becomes very easy in SASS by using curly braces we can avoid complicated selectors
 * & can be used to replace the path of parent selector inside its curly braces a {} a:hover{} => a{ &:hover{}}
 * So for .main .main__paragraph we can do is .main{... #{&}__paragraph{...}} which will translate to .main .main__paragraph
 * Varibales can be defined starting with $ sign
 * background-color: lighten(#fff, 10%) and darken(#aaa , 20%) can also be used
 * Mixins are reusable code snippets we can use and are defined as @minxin mixin-name(){...}
 * Mixins can be used as @include mixin-name(); and we can also pass vars to these mixins as @include mixin-name($param){...}
 * Arguments can be passed in the mixin and can be used as normal in the body of the mixin
 * e.g. @mixin mixin-name($arg-1, $arg-2){here use these args}
 * We can also use a mixin by defining a media query in it as @mixin mobile{@media(max-width:$varValue){ @content; }} and
 * then we can use this mixin as @include mobile{flex-drection:column;}
 * @function function-name($arg-1, $agr-2) {@return $arg-1/$arg-2;}
 * e.g. margin: function-name(30, 3) * 1px; => margin: 10px; => We can call a function just by name no @ required
 * We can create a placeholder by using %placeholder-name and then inherit this placeholder
 * A rule can extend a placeholder by using @extend %placeholder-name;
 * A palceholder takes all the selectors in which it is being extended and adds their combination 
 * as selectors for the CSS declartions inside it
 * Extend should be preferred over mixins only when all the items extending a placeholder are
 * inherently similar e.g. buttons
 * If we use _name.scss for a file it wont be compiled by the compiler and we can import this
 * file simply into our main.scss file by using @use file-name, these files are called partials;
 * we can also import the partials in the main file using @import "dir/partialname";
 * conditionals can be used like @if $width == 30px {do something...} else if{...} else{...}

*/


/*----------- General CSS Tricks ------------*/
/*
 * selector [class^="col"] means select all elements with a className starting with col
 * selector [class*="col"] means select all elements with a className containing col
 * selector [class$="col"] means select all elements with a className ending with col
 * -webkit-background-clip:text;  will clip the background image to text
 * color: transparent; will make the text transparent so bg image will overlay
 * set rotateY(180deg) on an element to create a rotational effect
 * To give rotation a 3d effect set `perspective` on the parent element
 * backface-visibility: hidden hides the rotated element's flipped content
 * We can also skew a section rather than using the clip path but then skew inner elements opposite
 * you can pull a favicon by using href in a link tag as 'https://www.google.com/s2/favicons?domain=search.com'
 * we can use background-blendmode:screen rather than using an overlay gradient with low opacity
 * using bg as cover can overflow the container hence ruining the border radius, so use overflow:hidden
 * -webkit-box-decoration-break:clone,due to an elment's line break treats it as two diff elements 
 * An image with a caption can be put under the figure tag in html
 * The caption can be put in the tag figcaption
 * we can use shape-outside to wrap text in a certain pattern around an element
 * filter is another very useful css property
 * &rarr creates a right arrow => useful for buttons 
 * The video tag can be used to embed a video but the unlike img it should not have src in the tag
 * <video class="class-name" autoplay mute loop>
 * Rather we add <source src="../vid.mp4" type="video/mp4"> tag inside the video tag
 * Add another <source src="../vid.webm" type="video/webm> and text Your browser is not supported
 * The text will apear when a browser is unable to render any of the above
 * coverr website has a lot of cover videos
 * If we want to set any object other than an image as cover we can use object-fit:cover;
 * background-size can also have a % value means 100% etc
 * gradient with an angle can be used to overlay an image and create a decent transparent layer
 * input element does not inherit font-family by default
 * when we want to exclude last child from a certain style we can do :not(:last-child)
 * The pseudo element ::-webkit-input-placeholder can be used to change the placeholder color
 * CSS CAN STYLE AN INPUT BASED ON VALID OR INVALID VALUE input:focus:invalid{...}
 * The pseudo class :placeholder-shown can check if the user has enetered anything in the input
 * In the input type radio the same name attribute makes sure that only one of these is selected
 * The input and label elements are connected to each other via the id(input) and for(label) id


/*----------- NPM ------------*/
/*
 * The NodeJs is a Javascript runtime using which we can run js on a server rather than a browser
 * Over the time developers used Node to create libraries and tools called packages for facilitation
 * These packages include a package manager called npm and it can install the required packages
 * for us in a project
 * Some commands used after installing node on a machine
 * 'node -v' => gives version of node installed
 * 'npm init' => initializes a Js runtime in a give folder and sets up a package.json file
 * package.json contains all the data of the project and its dependencies
 * the devdependencies in package.json are the tools we MUST have to develop the project
 * the dependecies are simple files/libraries like jquery that are being used in the project
 * to install node-sass in the our runtime we use command 'npm install node-sass --save-dev'
 * to use jquery in the project we use 'npm install jquery --save'
 * The --save-dev and --save flags are used to write these dependencies to package.json file
 * When we send our project to someone or upload it on github we don't include node_modules folder
 * Rather we just use 'npm install' command and the package manager auto install all the dependencies
 * given in the package.json file
 * To remove a package we can use 'npm uninstall jquery --save' => --save will update package.json
 * 'edit main.scss' can be used to create a file
 * To compile sass to css we need to include a script in package.json
 * we can include "compile:sass" : "node-sass sass/main.scss css/style.css" to the scripts in package.json
 * Then we use command: 'npm run compile:sass'
 * Use "node-sass sass/main.scss css/style.css -w" to watch for changes automatically
 * 'npm install live-server -g' will install live server globally
 * run 'live-server' on command line to open up a project in browser